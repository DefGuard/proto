syntax = "proto3";
package gateway;

import "google/protobuf/empty.proto";

// TODO: remove
message ConfigurationRequest {
  optional string name = 1;
}

message Configuration {
  string name = 1;
  string prvkey = 2;
  string address = 3;
  uint32 port = 4;
  repeated Peer peers = 5;
}

enum UpdateType {
  CREATE = 0;
  MODIFY = 1;
  DELETE = 2;
}

message Peer {
  string pubkey = 1;
  repeated string allowed_ips = 2;
  optional string preshared_key = 3;
  optional uint32 keepalive_interval = 4;
}

message Update {
  UpdateType update_type = 1;
  oneof update {
    Peer peer = 2;
    Configuration network = 3;
  }
}

message PeerStats {
  string public_key = 1;
  string endpoint = 2;
  uint64 upload = 3;
  uint64 download = 4;
  uint32 keepalive_interval = 5;
  uint64 latest_handshake = 6;
  string allowed_ips = 7;
}

/*
 * CoreResponse represents messages send from core to gateway
 * in response to CoreRequest.
 */
message CoreResponse {
  uint64 id = 1;
  oneof payload {
    // Allow empty messages to keep the connection alive.
    google.protobuf.Empty empty = 2;
    Configuration config = 3;
    Update update = 4;
  }
}

/*
 * CoreRequest represents messages send from gateway to core.
 */
message CoreRequest {
  uint64 id = 1;
  oneof payload {
    PeerStats peer_stats = 2;
    ConfigurationRequest config_request = 3; // TODO: remove
  }
}

/*
 * Bi-directional communication between core and gateway.
 * For security reasons, the connection has to be initiated by core,
 * so requests and responses are actually send in reverse.
 */
service Gateway {
  rpc Bidi (stream CoreResponse) returns (stream CoreRequest);
}
